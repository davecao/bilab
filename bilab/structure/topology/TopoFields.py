# -*- coding: utf-8 -*-
from numpy import array
from bilab.utilities import wrapText

__all__ = ["AMBER_TOPO_FIELDS"]

# @Author: Wei Cao
# @Date:   2016-03-04 16:19:57
# @Last Modified by:   Wei Cao
# @Last Modified time: 2016-03-10 16:50:25

__doc__ = """
Refer to http://ambermd.org/formats.html

Standard prmtop info generated by LEap programs, sleap or tleap/xleap
 FORMAT(10I8)
 1.  NATOM    : total number of atoms
 2.  NTYPES   : total number of distinct atom types
 3.  NBONH    : number of bonds containing hydrogen
 4.  MBONA    : number of bonds not containing hydrogen
 5.  NTHETH   : number of angles containing hydrogen
 6.  MTHETA   : number of angles not containing hydrogen
 7.  NPHIH    : number of dihedrals containing hydrogen
 8.  MPHIA    : number of dihedrals not containing hydrogen
 9.  NHPARM   : currently not used
 10. NPARM    : used to determine if addles created prmtop
 11. NNB      : number of excluded atoms
 12. NRES     : number of residues
 13. NBONA    : MBONA + number of constraint bonds
 14. NTHETA   : MTHETA + number of constraint angles
 15. NPHIA    : MPHIA + number of constraint dihedrals
 16. NUMBND   : number of unique bond types
 17. NUMANG   : number of unique angle types
 18. NPTRA    : number of unique dihedral types
 19. NATYP    : number of atom types in parameter file, see SOLTY below
 20. NPHB     : number of distinct 10-12 hydrogen bond pair types
 21. IFPERT   : set to 1 if perturbation info is to be read in
 22. NBPER    : number of bonds to be perturbed
 23. NGPER    : number of angles to be perturbed
 24. NDPER    : number of dihedrals to be perturbed
 25. MBPER    : number of bonds with atoms completely in perturbed group
 26. MGPER    : number of angles with atoms completely in perturbed group
 27. MDPER    : number of dihedrals with atoms completely in perturbed groups
 28. IFBOX    : set to 1 if standard periodic box, 2 when truncated octahedral
 29. NMXRS    : number of atoms in the largest residue
 30. IFCAP    : set to 1 if the CAP option from edit was specified
 31. NUMEXTRA : number of extra points found in topology
 32. NCOPY    : number of PIMD slices / number of beads
 Format        -  FLAG
--------------------------------------------------------------------------------
FORMAT(20a4)   - TITLE
                 (ITITL(i), i=1,20)
                 ITITL  : title

FORMAT(10I8)   - POINTERS (see the above field, 1-32)

FORMAT(20a4)   - ATOM_NAME
                 (IGRAPH(i), i=1,NATOM)
                 IGRAPH : the user-specified atoms names

FORMAT(5E16.8) - CHARGE
                 (CHARGE(i), i=1,NATOM)
                 CHARGE : the atom charges.  Amber internally uses units of
                          charge such that E = q1*q2/r, where E is in kcal/mol,
                          r is in Angstrom, and q1,q2 are the values found in
                          this section of the prmtop file.

FORMAT(10I8)   - ATOMIC_NUMBER
                 (ATNUM(i), i=1,NATOM)
                 ATNUM : the atomic number of each atom.

FORMAT(5E16.8) - MASS
                 (AMASS(i), i=1,NATOM)
                 AMASS  : the atom masses

FORMAT(10I8)   - ATOM_TYPE_INDEX
                 (IAC(i), i=1,NATOM)
                 IAC: index for the atom types involved in Lennard Jones (6-12)
                      interactions.  See ICO below.

FORMAT(10I8)   - NUMBER_EXCLUDED_ATOMS
                 (NUMEX(i), i=1,NATOM)
                 NUMEX: total number of excluded atoms for atom "i". Also
                        called IBLO. See NATEX below.

FORMAT(10I8)   - NONBONDED_PARM_INDEX
                 (ICO(i), i=1,NTYPES*NTYPES)
                 ICO: provides the index to the nonbon parameter arrays CN1,
                      CN2 and ASOL, BSOL.  All possible 6-12 or 10-12 atoms
                      type interactions are represented.

                NOTE: A particular atom type can have either a 10-12 or a 6-12
                      interaction, but not both.  The index is calculated as
                      follows:
                        index = ICO(NTYPES*(IAC(i)-1)+IAC(j))
                      If index is positive, this is an index into the
                      6-12 parameter arrays (CN1 and CN2) otherwise it
                      is an index into the 10-12 parameter arrays (ASOL
                      and BSOL).

FORMAT(20A4)   - RESIDUE_LABEL
                 (LBRES(i), i=1,NRES)
                 LBRES: names of each of the residues

FORMAT(10I8)   - RESIDUE_POINTER
                 (IPRES(i), i=1,NRES)
                 IPRES: atoms in each residue are listed for atom "i" in
                        IPRES(i) to IPRES(i+1)-1

FORMAT(5E16.8) - BOND_FORCE_CONSTANT
                 (RK(i), i=1,NUMBND)
                 RK: force constant for the bonds of each type, kcal/(mol
                     Angstrom**2)

FORMAT(5E16.8) - BOND_EQUIL_VALUE
                 (REQ(i), i=1,NUMBND)
                 REQ: the equilibrium bond length for the bonds of each type,
                      Angstroms

FORMAT(5E16.8) - ANGLE_FORCE_CONSTANT
                 (TK(i), i=1,NUMANG)
                 TK: force constant for the angles of each type, kcal/(mol
                     radian**2)

FORMAT(5E16.8) - ANGLE_EQUIL_VALUE
                 (TEQ(i), i=1,NUMANG)
                 TEQ: the equilibrium angle for the angles of each type,radians

FORMAT(5E16.8) - DIHEDRAL_FORCE_CONSTANT
                 (PK(i), i=1,NPTRA)
                 PK: force constant for the dihedrals of each type, kcal/mol

FORMAT(5E16.8) - DIHEDRAL_PERIODICITY
                (PN(i), i=1,NPTRA)
                PN: periodicity of the dihedral of a given type

FORMAT(5E16.8) - DIHEDRAL_PHASE
                (PHASE(i), i=1,NPTRA)
                PHASE: phase of the dihedral of a given type, radians

FORMAT(5E16.8) - SCEE_SCALE_FACTOR
                 (ONE_SCEE(i), i=1,NPTRA)
                 ONE_SCEE: 1-4 electrostatic scaling constant. It is inverted
                           right after it's read in for performance reasons.
                           This allows variable 1-4 scaling. If not present,
                           it defaults to 1.2 for all dihedrals. Therefore,
                           the default ONE_SCEE value in the code is 1.0/1.2

FORMAT(5E16.8) - SCNB_SCALE_FACTOR
                 (ONE_SCNB(i), i=1,NPTRA)
                 ONE_SCNB: 1-4 VDW scaling constant. It is inverted right after
                 it's read in. This allows variable 1-4 scaling. If not
                 present, it defaults to 2.0 for all dihedrals. Therefore, the
                 default ONE_SCNB value in the code is 1.0/2.0

FORMAT(5E16.8) - SOLTY
                 (SOLTY(i), i=1,NATYP)
                 SOLTY  : currently unused (reserved for future use)

FORMAT(5E16.8) - LENNARD_JONES_ACOEF
                 (CN1(i), i=1,NTYPES*(NTYPES+1)/2)
                 CN1: Lennard Jones r**12 terms for all possible atom type
                      interactions, indexed by ICO and IAC; for atom i and j
                      where i < j, the index into this array is as follows
                      (assuming the value of ICO(index) is positive):
                            CN1(ICO(NTYPES*(IAC(i)-1)+IAC(j))).

FORMAT(5E16.8) - LENNARD_JONES_BCOEF
                 (CN2(i), i=1,NTYPES*(NTYPES+1)/2)
                 CN2: Lennard Jones r**6 terms for all possible
                      atom type interactions.  Indexed like CN1 above.
**NOTE**:
  the atom numbers in the following arrays that describe bonds, angles, and
  dihedrals are coordinate array indexes for runtime speed. The true atom
  number equals the absolute value of the number divided by three, plus one.
  In the case of the dihedrals, if the fourth atom is negative, this implies
  that the dihedral is an improper. If the third atom is negative, this implies
  that the end group interations are to be ignored. End group interactions are
  ignored, for example, in dihedrals of various ring systems (to prevent double
  counting of 1-4 interactions) and in multiterm dihedrals.

FORMAT(10I8)   - BONDS_INC_HYDROGEN
                 ((IBH(i),JBH(i),ICBH(i), i=1,NBONH)
                 IBH: atom involved in bond "i", bond contains hydrogen
                 JBH: atom involved in bond "i", bond contains hydrogen
                 ICBH: index into parameter arrays RK and REQ

FORMAT(10I8)   - BONDS_WITHOUT_HYDROGEN
                 (IB(i),JB(i),ICB(i), i=1,NBONA)
                 IB: atom involved in bond "i", bond does not contain hydrogen
                 JB: atom involved in bond "i", bond does not contain hydrogen
                 ICB: index into parameter arrays RK and REQ

FORMAT(10I8)   - ANGLES_INC_HYDROGEN
                 (ITH(i),JTH(i),KTH(i),ICTH(i),i=1,NTHETH)
                 ITH: atom involved in angle "i", angle contains hydrogen
                 JTH: atom involved in angle "i", angle contains hydrogen
                 KTH: atom involved in angle "i", angle contains hydrogen
                 ICTH: index into parameter arrays TK and TEQ for angle
                       ITH(i)-JTH(i)-KTH(i)

FORMAT(10I8)   - ANGLES_WITHOUT_HYDROGEN
                 (IT(i),JT(i),KT(i),ICT(i),i=1,NTHETA)
                 IT:atom involved in angle "i", angle does not contain hydrogen
                 JT:atom involved in angle "i", angle does not contain hydrogen
                 KT:atom involved in angle "i", angle does not contain hydrogen
                 ICT: index into parameter arrays TK and TEQ for angle
                      IT(i)-JT(i)-KT(i)

FORMAT(10I8)   - DIHEDRALS_INC_HYDROGEN
                 (IPH(i),JPH(i),KPH(i),LPH(i),ICPH(i),i=1,NPHIH)
                 IPH: atom involved in dihedral "i", dihedral contains hydrogen
                 JPH: atom involved in dihedral "i", dihedral contains hydrogen
                 KPH: atom involved in dihedral "i", dihedral contains hydrogen
                 LPH: atom involved in dihedral "i", dihedral contains hydrogen
                 ICPH: index into parameter arrays PK, PN, PHASE, ONE_SCEE,
                       and ONE_SCNB for dihedral IPH(i)-JPH(i)-KPH(i)-LPH(i)

FORMAT(10I8)   - DIHEDRALS_WITHOUT_HYDROGEN
                 (IP(i),JP(i),KP(i),LP(i),ICP(i),i=1,NPHIA)
                 IP:atom involved in dihedral "i", dihedral does not contain
                    hydrogen
                 JP: atom involved in dihedral "i", dihedral does not contain
                    hydrogen
                 KP: atom involved in dihedral "i", dihedral does not contain
                    hydrogen
                 LP: atom involved in dihedral "i", dihedral does not contain
                    hydrogen
                 ICP: index into parameter arrays PK, PN, PHASE, ONE_SCEE, and
                      ONE_SCNB for dihedral IPH(i)-JPH(i)-KPH(i)-LPH(i).
                      Note, if the periodicity is negative, this implies the
                      following entry in the PK, PN, and PHASE arrays is
                      another term in a multitermed dihedral.

FORMAT(10I8)   - EXCLUDED_ATOMS_LIST
                 (INB(i), i=1,NNB)
                 INB: the excluded atom list.  To get the excluded list for
                      atom "i" you need to traverse the NUMEX list, adding up
                      all the previous NUMEX values, since NUMEX(i) holds the
                      number of excluded atoms for atom "i", not the index into
                      the NATEX list.  Let IEXCL = SUM(NUMEX(j), j=1,i-1), then
                      excluded atoms are INB(IEXCL) to INB(IEXCL+NUMEX(i)).
                      Note, this array was called NATEX at one point, and while
                      in most places it is now INB, it is still called NATEX in
                      some places (especially in pmemd)

FORMAT(5E16.8) - HBOND_ACOEF
                 (ASOL(i), i=1,NPHB)
                 ASOL: the value for the r**12 term for hydrogen bonds of all
                    possible types.  Index into these arrays is equivalent
                    to the CN1 and CN2 arrays, however the index is negative.
                 For example, for atoms i and j, with i < j, the index is
                   -ICO(NTYPES*(IAC(i)-1+IAC(j)). Note: Amber must be compiled
                   with -DHAS_10_12 in order to make use of this term!

FORMAT(5E16.8) - HBOND_BCOEF
                 (BSOL(i), i=1,NPHB)
                 BSOL: the value for the r**10 term for hydrogen bonds of all
                       possible types.  Indexed like ASOL.
                       Note: same restriction applies for use.

FORMAT(5E16.8) - HBCUT
                 (HBCUT(i), i=1,NPHB)
                 HBCUT  : no longer in use

FORMAT(20A4) - AMBER_ATOM_TYPE
               (ISYMBL(i), i=1,NATOM)
               ISYMBL : the AMBER atom types for each atom

FORMAT(20A4) - TREE_CHAIN_CLASSIFICATION
               (ITREE(i), i=1,NATOM)
               ITREE: the list of tree joining information, classified into
               five types.
                  M -- main chain,
                  S -- side chain,
                  B -- branch point,
                  3 -- branch into three chains,
                  E -- end of the chain

FORMAT(10I8) - JOIN_ARRAY
               (JOIN(i), i=1,NATOM)
               JOIN: tree joining information, potentially used in ancient
                     analysis programs.  Currently unused in sander or gibbs.

FORMAT(10I8) - IROTAT
               (IROTAT(i), i = 1, NATOM)
               IROTAT: apparently the last atom that would move if atom i was
                       rotated, however the meaning has been lost over time.
                       Currently unused in sander or gibbs.

FORMAT(1a80) - RADIUS_SET,
               TYPE   : the radius set chosen inside LEaP

FORMAT(5E16.8) - RADII
                 (RBORN(i), i=1,NATOM)
                 RBORN  : Generalized Born intrinsic dielectric radii

FORMAT(5E16.8) - SCREEN
                 (FS(i), i=1,NATOM)
                 FS: Screening parameters used in Generalized Born

***　The following are only present if IFBOX .gt. 0　***
FORMAT(3I8)  - SOLVENT_POINTERS
               IPTRES, NSPM, NSPSOL
               IPTRES: final residue that is considered part of the solute,
                       reset in sander and gibbs
               NSPM: total number of molecules
               NSPSOL: the first solvent "molecule"

FORMAT(10I8) - ATOMS_PER_MOLECULE
               (NSP(i), i=1,NSPM)
               NSP: the total number of atoms in each molecule,
                    necessary to correctly perform the pressure
                    scaling.

FORMAT(5E16.8)  - BOX_DIMENSIONS
                  OLDBETA, BOX(1), BOX(2), BOX(3)
                  OLDBETA: periodic box, angle between the XY and YZ planes in
                           degrees. This is now redundant, as it is present in
                           the inpcrd files. It is ignored here.
                  BOX: the periodic box lengths in the X, Y, and Z directions.
                       This is now redundant, as it is present in the inpcrd
                       files. It is ignored here.

*** The following are only present if IFCAP .gt. 0　***
FORMAT(10I8) - CAP_INFO
               NATCAP
               NATCAP: last atom before the start of the cap of waters
                       placed by edit

FORMAT(5E16.8) - CAP_INFO2
               CUTCAP, XCAP, YCAP, ZCAP
               CUTCAP: the distance from the center of the cap to the outside
               XCAP: X coordinate for the center of the cap
               YCAP: Y coordinate for the center of the cap
               ZCAP: Z coordinate for the center of the cap

*** The following is only present if IFPERT .gt. 0 ***
Note that the initial state, or equivalently the prep/link/edit state, is
represented by lambda=1 and the perturbed state, or final state specified in
parm, is the lambda=0 state. This information is only used for GIBBS and is
unused in either SANDER or PMEMD.

FORMAT(12I6)  (IBPER(i), JBPER(i), i=1,NBPER)
              IBPER  : atoms involved in perturbed bonds
              JBPER  : atoms involved in perturbed bonds

FORMAT(12I6)  (ICBPER(i), i=1,2*NBPER)
              ICBPER: pointer into the bond parameter arrays RK and REQ for the
                       perturbed bonds.  ICBPER(i) represents lambda=1 and
                       ICBPER(i+NBPER) represents lambda=0.

FORMAT(12I6)  (ITPER(i), JTPER(i), KTPER(i), i=1,NGPER)
              IPTER  : atoms involved in perturbed angles
              JTPER  : atoms involved in perturbed angles
              KTPER  : atoms involved in perturbed angles

FORMAT(12I6)  (ICTPER(i), i=1,2*NGPER)
              ICTPER : pointer into the angle parameter arrays TK and TEQ for
                       the perturbed angles.  ICTPER(i) represents lambda=0 and
                       ICTPER(i+NGPER) represents lambda=1.

FORMAT(12I6)  (IPPER(i), JPPER(i), KPPER(i), LPPER(i), i=1,NDPER)
              IPPER  : atoms involved in perturbed dihedrals
              JPPER  : atoms involved in perturbed dihedrals
              KPPER  : atoms involved in perturbed dihedrals
              LPPER  : atoms involved in pertrubed dihedrals

FORMAT(12I6)  (ICPPER(i), i=1,2*NDPER)
              ICPPER : pointer into the dihedral parameter arrays PK, PN and
                       PHASE for the perturbed dihedrals.  ICPPER(i) represents
                       lambda=1 and ICPPER(i+NGPER) represents lambda=0.

FORMAT(20A4)  (LABRES(i), i=1,NRES)
              LABRES : residue names at lambda=0

FORMAT(20A4)  (IGRPER(i), i=1,NATOM)
              IGRPER : atomic names at lambda=0

FORMAT(20A4)  (ISMPER(i), i=1,NATOM)
              ISMPER : atomic symbols at lambda=0

FORMAT(5E16.8)  (ALMPER(i), i=1,NATOM)
                ALMPER : unused currently in gibbs

FORMAT(12I6)  (IAPER(i), i=1,NATOM)
              IAPER  : IAPER(i) = 1 if the atom is being perturbed

FORMAT(12I6)  (IACPER(i), i=1,NATOM)
            IACPER : index for the atom types involved in Lennard Jones
                     interactions at lambda=0.  Similar to IAC above.
                     See ICO above.

FORMAT(5E16.8)  (CGPER(i), i=1,NATOM)
                CGPER  : atomic charges at lambda=0

*** The following is only present if IPOL .eq. 1 ***
FORMAT(5E18.8) - POLARIZABILITY
                 (ATPOL(i), i=1,NATOM)
                 ATPOL  : atomic polarizabilities

***　The following is only present if IPOL .eq. 1 .and. IFPERT .eq. 1　***

FORMAT(5E18.8) (ATPOL1(i), i=1,NATOM)
            　　ATPOL1 : atomic polarizabilities at lambda = 1
            　　　　　　　　(above is at lambda = 0)
"""

READONLY = set()

DTYPE = array(['a']).dtype.char  # 'S' for PY2K and 'U' for PY3K


class TOPOFields(object):

    __slots__ = ['name', 'group', 'dtype', 'doc', 'doc_pl', 'meth', 'meth_pl',
                 'ndim', 'none', 'selstr', 'synonym', 'readonly', 'call',
                 'private', 'depr', 'depr_pl', 'desc', 'flags']

    def __init__(self, name, dtype, group, **kwargs):
        # data field name
        self.name = name
        # data type (primitive Python types)
        self.dtype = dtype
        # group data by flag
        self.group = group
        # internal variable name
        self.doc = kwargs.get('doc', name)
        # plural form for documentation
        self.doc_pl = kwargs.get('doc_pl', self.doc + 's')
        # description of data field, used in documentation
        self.desc = kwargs.get('desc')
        # expected dimension of the data array
        self.ndim = kwargs.get('ndim', 1)
        # atomic get/set method name
        self.meth = kwargs.get('meth', name.capitalize())
        # get/set method name in plural form
        self.meth_pl = kwargs.get('meth_pl', self.meth + 's')
        #
        self.none = kwargs.get('none')
        # list of selection string examples
        self.selstr = kwargs.get('selstr')
        # deprecated method name
        self.depr = kwargs.get('depr')
        # deprecated method name in plural form
        self.depr_pl = None
        if self.depr is not None:
            self.depr_pl = kwargs.get('depr_pl', self.depr + 's')
        # synonym
        self.synonym = kwargs.get('synonym')
        # read-only attribute without a set method
        self.readonly = kwargs.get('readonly', False)
        # list of methods to call when ``getMethod`` is called
        self.call = kwargs.get('call', None)
        #
        self.private = kwargs.get('private', False)
        # **True** when there are flags associated with the data field
        self.flags = kwargs.get('flags', False)

        if self.readonly:
            READONLY.add(self.name)

    def getDocstr(self, meth, plural=True, selex=True):
        """Return documentation string for the field."""

        assert meth in ('set', 'get', '_get'), "meth must be 'set' or 'get'"
        assert isinstance(plural, bool), 'plural must be a boolean'
        assert isinstance(selex, bool), 'selex must be a boolean'

        if meth == 'get':
            if plural:
                docstr = 'Return a copy of {0}.'.format(self.doc_pl)
            else:
                docstr = 'Return {0} of the atom.'.format(self.doc)
        elif meth == 'set':
            if plural:
                docstr = 'Set {0}.'.format(self.doc_pl)
            else:
                docstr = 'Set {0} of the atom.'.format(self.doc)
        else:
            selex = False
            if plural:
                docstr = 'Return {0} array.'.format(self.doc_pl)

        if self.desc:
            docstr += '  ' + self.desc

        selstr = self.selstr
        if selex and selstr:
            if plural:
                doc = self.doc_pl
            else:
                doc = self.doc
            if '(' in doc:
                doc = doc[:doc.index('(')]
            selex = "``, ``".join([repr(s) for s in selstr])
            selex = ("  {0} can be used in atom selections, e.g. "
                     "``{1}``.").format(doc.capitalize(), selex)
            if self.synonym is not None:
                selex = selex + ('  Note that *{0}* is a synonym for '
                                 '*{1}*.').format(self.synonym, self.name)
            return wrapText(docstr + selex)
        else:
            return wrapText(docstr)

AMBER_TOPO_FIELDS = {
    'titl': TOPOFields('title', DTYPE+'20', 'TITLE',
                       meth="", meth_pl=""),
    # 'natom': TOPOFields('natom', int, 'POINTERS', doc="Total number of atoms",
    #                    meth="Natom"),
    'ntypes': TOPOFields('ntypes', int, 'POINTERS',
                         doc="Total number of distinct atom types",
                         meth="", meth_pl="Ntype"
                         ),
    'nbonh': TOPOFields('nbonh', int, 'POINTERS',
                        doc="Number of bonds containing hydrogen",
                        meth="Nbonh", meth_pl="Nbonh"),
    'mbona': TOPOFields('mbona', int, 'POINTERS',
                        doc="Number of bonds not containing hydrogen",
                        meth="",
                        meth_pl="Mbona"),
    'ntheth': TOPOFields('ntheth', int, 'POINTERS',
                         doc="number of angles containing hydrogen",
                         meth="",
                         meth_pl="Ntheth"),
    'mtheta': TOPOFields('mtheta', int, 'POINTERS',
                         doc="number of angles not containing hydrogen",
                         meth="",
                         meth_pl="Mtheta"),
    'nphih': TOPOFields('nphih', int, 'POINTERS',
                        doc="number of dihedrals containing hydrogen",
                        meth="",
                        meth_pl="Nphih"),
    'mphia': TOPOFields('mphia', int, 'POINTERS',
                        doc="number of dihedrals not containing hydrogen",
                        meth="",
                        meth_pl="Mphia"),
    'nhparm': TOPOFields('nhparm', int, 'POINTERS',
                         doc="currently not used",
                         meth="",
                         meth_pl="Nhparm"),
    'nparm': TOPOFields('nparm', int, 'POINTERS',
                        doc="used to determine if addles created prmtop",
                        meth="",
                        meth_pl="Nparm"),
    'nnb': TOPOFields('nnb', int, 'POINTERS',
                      doc="number of excluded atoms",
                      meth="",
                      meth_pl="Nnb"),
    'nres': TOPOFields('nres', int, 'POINTERS',
                       doc="number of residues",
                       meth="",
                       meth_pl="Nres"),
    'nbona': TOPOFields('nbona', int, 'POINTERS',
                        doc="MBONA + number of constraint bonds",
                        meth="",
                        meth_pl="Nbona"),
    'ntheta': TOPOFields('ntheta', int, 'POINTERS',
                         doc="MTHETA + number of constraint angles",
                         meth="",
                         meth_pl="Ntheta"),
    'nphia': TOPOFields('nphia', int, 'POINTERS',
                        doc="MPHIA + number of constraint dihedrals",
                        meth="",
                        meth_pl="Nphia"),
    'numbnd': TOPOFields('numbnd', int, 'POINTERS',
                         doc="number of unique bond types",
                         meth="",
                         meth_pl="Numbnd"),
    'numang': TOPOFields('numang', int, 'POINTERS',
                         doc="number of unique angle types",
                         meth="",
                         meth_pl="Numang"),
    'nptra': TOPOFields('nptra', int, 'POINTERS',
                        doc="number of unique dihedral types",
                        meth="",
                        meth_pl="Nptra"),
    'natyp': TOPOFields('natyp', int, 'POINTERS',
                        doc="number of atom types in parameter file,"
                            " see SOLTY below",
                        meth="",
                        meth_pl="Natyp"),
    'nphb': TOPOFields('nphb', int, 'POINTERS',
                       doc="number of distinct 10-12 hydrogen bond pair types",
                       meth="",
                       meth_pl="Nphb"),
    'ifpert': TOPOFields('ifpert', int, 'POINTERS',
                         doc="set to 1 if perturbation info is to be read in",
                         meth="",
                         meth_pl="Ifpert"),
    'nbper': TOPOFields('nbper', int, 'POINTERS',
                        doc="number of bonds to be perturbed",
                        meth="",
                        meth_pl="Nbper"),
    'ngper': TOPOFields('ngper', int, 'POINTERS',
                        doc="number of angles to be perturbed",
                        meth="",
                        meth_pl="Ngper"),
    'ndper': TOPOFields('ndper', int, 'POINTERS',
                        doc="number of dihedrals to be perturbed",
                        meth="",
                        meth_pl="Ndper"),
    'mbper': TOPOFields('mbper', int, 'POINTERS',
                        doc="number of bonds with atoms completely in "
                            "perturbed group",
                        meth="",
                        meth_pl="Mbper"),
    'mgper': TOPOFields('mgper', int, 'POINTERS',
                        doc="number of angles with atoms completely in "
                            "perturbed group",
                        meth="",
                        meth_pl="Mgper"),
    'mdper': TOPOFields('mdper', int, 'POINTERS',
                        doc="number of dihedrals with atoms completely in "
                            "perturbed groups",
                        meth="",
                        meth_pl="Mdper"),
    'ifbox': TOPOFields('ifbox', int, 'POINTERS',
                        doc="set to 1 if standard periodic box,"
                            "2 when truncated octahedral",
                        meth="",
                        meth_pl="Ifbox"),
    'nmxrs': TOPOFields('nmxrs', int, 'POINTERS',
                        doc="number of atoms in the largest residue",
                        meth="",
                        meth_pl="Nmxrs"),
    'ifcap': TOPOFields('ifcap', int, 'POINTERS',
                        doc="set to 1 if the CAP option from edit was specified",
                        meth="", meth_pl="Ifcap"),
    'numextra': TOPOFields('numextra', int, 'POINTERS',
                           doc="number of extra points found in topology",
                           meth="",
                           meth_pl="Numextra"),
    'ncopy': TOPOFields('ncopy', int, 'POINTERS',
                        doc="number of PIMD slices / number of beads",
                        meth="",
                        meth_pl="Ncopy"),
    'igraph': TOPOFields('igraph', DTYPE+'4', 'ATOM_NAME',
                         doc="the user-specified atoms names",
                         meth="",
                         meth_pl="Igraph"),
    'charge': TOPOFields('charge', float, 'CHARGE',
                         doc="the atom charges",
                         meth="Charge",
                         meth_pl="Charges"),
    'atnum': TOPOFields('atnum', int, 'ATOMIC_NUMBER',
                        doc="the atomic number of each atom",
                        meth="Atnum",
                        meth_pl="Atnums"),
    'amass': TOPOFields('amass', float, 'MASS',
                        doc="the atom masses",
                        meth="Amass",
                        meth_pl="Amasses"),
    'iac': TOPOFields('iac', int, 'ATOM_TYPE_INDEX',
                      doc="index for the atom types involved in Lennard Jones"
                          "(6-12) interactions.  See ICO.",
                      meth="Iac",
                      meth_pl="Iacs"),
    'numex': TOPOFields('numex', int, 'NUMBER_EXCLUDED_ATOMS',
                        doc="total number of excluded atoms for atom 'i'."
                            "Also called IBLO. See NATEX.",
                        meth="Numex",
                        meth_pl="Numexes"),

    'ico': TOPOFields('ico', int, 'NONBONDED_PARM_INDEX',
                      doc="provides the index to the nonbon parameter"
                          "arrays CN1, CN2 and ASOL, BSOL.",
                      meth="Ico",
                      meth_pl="Icoes"),
    'lbres': TOPOFields('lbres', int, 'RESIDUE_LABEL',
                        doc="total number of excluded atoms for atom 'i'."
                            "Also called IBLO. See NATEX.",
                        meth="Lbres",
                        meth_pl="Lbreses"),
    'ipres': TOPOFields('ipres', int, 'RESIDUE_POINTER',
                        doc="total number of excluded atoms for atom 'i'."
                            "Also called IBLO. See NATEX.",
                        meth="Ipres",
                        meth_pl="Ipreses"),
    'rk': TOPOFields('rk', float, 'BOND_FORCE_CONSTANT',
                     doc="force constant for the bonds of each type, "
                         "kcal/(mol Angstrom**2)",
                     meth="RK",
                     meth_pl="RKs"),
    'req': TOPOFields('req', float, 'BOND_EQUIL_VALUE',
                      doc="the equilibrium bond length for the bonds of "
                          "each type, Angstroms",
                      meth="Req",
                      meth_pl="Reqs"),
    'tk': TOPOFields('tk', float, 'ANGLE_FORCE_CONSTANT',
                     doc="force constant for the angles of each type, "
                         "kcal/(mol radian**2)",
                     meth="TK",
                     meth_pl="TKs"),
    'teq': TOPOFields('teq', float, 'ANGLE_EQUIL_VALUE',
                      doc="the equilibrium angle for the angles of each type"
                          ", radians",
                      meth="Teq",
                      meth_pl="Teqs"),
    'pk': TOPOFields('pk', float, 'DIHEDRAL_FORCE_CONSTANT',
                     doc="force constant for the dihedrals of each type,"
                         " kcal/mol",
                     meth="PK",
                     meth_pl="PKs"),
    'pn': TOPOFields('pn', float, 'DIHEDRAL_PERIODICITY',
                     doc="periodicity of the dihedral of a given type",
                     meth="PN",
                     meth_pl="PNs"),
    'phase': TOPOFields('phase', float, 'DIHEDRAL_PHASE',
                        doc="phase of the dihedral of a given type, radians.",
                        meth="Phase",
                        meth_pl="Phases"),
    'one_scee': TOPOFields('one_scee', float, 'SCEE_SCALE_FACTOR',
                           doc="1-4 electrostatic scaling constant.",
                           meth="One_scee",
                           meth_pl="One_scees"),
    'one_scnb': TOPOFields('one_scnb', float, 'SCNB_SCALE_FACTOR',
                           doc="1-4 VDW scaling constant.",
                           meth="One_scnb",
                           meth_pl="One_scnbs"),
    'solty': TOPOFields('solty', float, 'SOLTY',
                        doc="currently unused (reserved for future use).",
                        meth="Solty",
                        meth_pl="Solites"),
    'cn1': TOPOFields('cn1', float, 'LENNARD_JONES_ACOEF',
                      doc="Lennard Jones r**12 terms for all possible atom "
                          "type interactions, indexed by ICO and IAC; for "
                          "atom i and j where i < j, the index into this "
                          "array is as follows (assuming the value of ICO"
                          "(index) is positive):"
                          "CN1(ICO(NTYPES*(IAC(i)-1)+IAC(j))).",
                      meth="CN1",
                      meth_pl="CN1s"),
    'cn2': TOPOFields('cn2', float, 'LENNARD_JONES_BCOEF',
                      doc="Lennard Jones r**6 terms for all possible atom type"
                          "interactions.  Indexed like CN1.",
                      meth="CN2",
                      meth_pl="CN2s"),
    'ibh': TOPOFields('ibh', int, 'BONDS_INC_HYDROGEN',
                      doc="atom involved in bond i, bond contains hydrogen",
                      meth="Ibh",
                      meth_pl="Ibhs"),
    'jbh': TOPOFields('jbh', int, 'BONDS_INC_HYDROGEN',
                      doc="atom involved in bond i, bond contains hydrogen",
                      meth="Jbh",
                      meth_pl="Jbhs"),
    'icbh': TOPOFields('icbh', int, 'BONDS_INC_HYDROGEN',
                       doc="index into parameter arrays RK and REQ",
                       meth="Icbh",
                       meth_pl="Icbhs"),
    'ib': TOPOFields('ib', int, 'BONDS_WITHOUT_HYDROGEN',
                     doc="atom involved in bond i, bond *does* not "
                         "contain hydrogen",
                     meth="IB",
                     meth_pl="IBs"),
    'jb': TOPOFields('jb', int, 'BONDS_WITHOUT_HYDROGEN',
                     doc="atom involved in bond i, bond *does* not "
                         "contain hydrogen",
                     meth="JB",
                     meth_pl="JBs"),
    'icb': TOPOFields('icb', int, 'BONDS_WITHOUT_HYDROGEN',
                      doc="index into parameter arrays RK and REQ",
                      meth="Icb",
                      meth_pl="Icbs"),
    'ith': TOPOFields('ith', int, 'ANGLES_INC_HYDROGEN',
                      doc="atom involved in angle i, angle contains hydrogen",
                      meth="Ith",
                      meth_pl="Ithes"),
    'jth': TOPOFields('jth', int, 'ANGLES_INC_HYDROGEN',
                      doc="atom involved in angle i, angle contains hydrogen",
                      meth="Jth",
                      meth_pl="Jthes"),
    'kth': TOPOFields('kth', int, 'ANGLES_INC_HYDROGEN',
                      doc="atom involved in angle i, angle contains hydrogen",
                      meth="Kth",
                      meth_pl="Kthes"),
    'icth': TOPOFields('icth', int, 'ANGLES_INC_HYDROGEN',
                       doc="index into parameter arrays TK and TEQ for angle"
                           "ITH(i)-JTH(i)-KTH(i)",
                       meth="Icth",
                       meth_pl="Icthes"),
    'it': TOPOFields('it', int, 'ANGLES_WITHOUT_HYDROGEN',
                     doc="atom involved in angle i, angle *does* not "
                         "contain hydrogen",
                     meth="IT",
                     meth_pl="ITs"),
    'jt': TOPOFields('jt', int, 'ANGLES_WITHOUT_HYDROGEN',
                     doc="atom involved in angle i, angle *does* not "
                         "contain hydrogen",
                     meth="JT",
                     meth_pl="JTs"),
    'kt': TOPOFields('kt', int, 'ANGLES_WITHOUT_HYDROGEN',
                     doc="atom involved in angle i, angle *does* not "
                         "contain hydrogen",
                     meth="KT",
                     meth_pl="KTs"),
    'ict': TOPOFields('ict', int, 'ANGLES_WITHOUT_HYDROGEN',
                      doc="index into parameter arrays TK and TEQ for angle"
                          "IT(i)-JT(i)-KT(i)",
                      meth="Ict",
                      meth_pl="Icts"),
    'iph': TOPOFields('iph', int, 'DIHEDRALS_INC_HYDROGEN',
                      doc="atom involved in dihedral i, dihedral "
                          "contains hydrogen",
                      meth="Iph",
                      meth_pl="Iphes"),
    'jph': TOPOFields('jph', int, 'DIHEDRALS_INC_HYDROGEN',
                      doc="atom involved in dihedral i, dihedral "
                          "contains hydrogen",
                      meth="Jph",
                      meth_pl="Jphes"),
    'kph': TOPOFields('kph', int, 'DIHEDRALS_INC_HYDROGEN',
                      doc="atom involved in dihedral i, dihedral "
                          "contains hydrogen",
                      meth="Kph",
                      meth_pl="Kpthes"),
    'lph': TOPOFields('lph', int, 'DIHEDRALS_INC_HYDROGEN',
                      doc="atom involved in dihedral i, dihedral "
                          "contains hydrogen",
                      meth="Lph",
                      meth_pl="Lphes"),
    'icph': TOPOFields('icph', int, 'DIHEDRALS_INC_HYDROGEN',
                       doc="index into parameter arrays PK, PN, PHASE, "
                           "ONE_SCEE, and ONE_SCNB for dihedral "
                           "IPH(i)-JPH(i)-KPH(i)-LPH(i)",
                       meth="Icph",
                       meth_pl="Icphes"),
    'ip': TOPOFields('ip', int, 'DIHEDRALS_WITHOUT_HYDROGEN',
                     doc="atom involved in dihedral i, dihedral "
                         "does not contain hydrogen",
                     meth="IP",
                     meth_pl="IPs"),
    'jp': TOPOFields('jp', int, 'DIHEDRALS_WITHOUT_HYDROGEN',
                     doc="atom involved in dihedral i, dihedral "
                         "does not contain hydrogen",
                     meth="JP",
                     meth_pl="JPs"),
    'kp': TOPOFields('kp', int, 'DIHEDRALS_WITHOUT_HYDROGEN',
                     doc="atom involved in dihedral i, dihedral "
                         "does not contain hydrogen",
                     meth="KP",
                     meth_pl="KPs"),
    'lp': TOPOFields('lp', int, 'DIHEDRALS_WITHOUT_HYDROGEN',
                     doc="atom involved in dihedral i, dihedral "
                         "does not contain hydrogen",
                     meth="LP",
                     meth_pl="LPs"),
    'icp': TOPOFields('icp', int, 'DIHEDRALS_WITHOUT_HYDROGEN',
                      doc="index into parameter arrays PK, PN, PHASE, "
                          "ONE_SCEE, and ONE_SCNB for dihedral "
                          "IPH(i)-JPH(i)-KPH(i)-LPH(i).  Note, if the "
                          "periodicity is negative, this implies the following"
                          " entry in the PK, PN, and PHASE arrays is another"
                          " term in a multitermed dihedral.",
                      meth="Icp",
                      meth_pl="Icps"),
    'inb': TOPOFields('inb', int, 'EXCLUDED_ATOMS_LIST',
                      doc="the excluded atom list.",
                      meth="Inb",
                      meth_pl="Inbs"),
    'asol': TOPOFields('asol', float, 'HBOND_ACOEF',
                       doc="the value for the r**12 term for hydrogen bonds"
                           " of all possible types.",
                       meth="Asol",
                       meth_pl="Asols"),
    'bsol': TOPOFields('bsol', float, 'HBOND_ACOEF',
                       doc="the value for the r**10 term for hydrogen bonds"
                           " of all possible types.",
                       meth="Bsol",
                       meth_pl="Bsols"),
    'hcut': TOPOFields('hcut', float, 'HBCUT',
                       doc="no longer in use",
                       meth="",
                       meth_pl=""),
    'isymbl': TOPOFields('isymbl', int, 'AMBER_ATOM_TYPE',
                         doc="the AMBER atom types for each atom",
                         meth="Isymbl",
                         meth_pl="Isymbls"),
    'itree': TOPOFields('itree', DTYPE+"20", 'TREE_CHAIN_CLASSIFICATION',
                        doc="the list of tree joining information, classified"
                            " into five types. "
                            "M -- main chain, "
                            "S -- side chain, "
                            "B -- branch point, "
                            "3 -- branch into three chains, "
                            "E -- end of the chain",
                        meth="",
                        meth_pl="Itree"),
    'join': TOPOFields('join', int, 'JOIN_ARRAY',
                       doc="tree joining information, potentially used in "
                           "ancient analysis programs.  Currently unused in "
                           "sander or gibbs.",
                       meth="",
                       meth_pl="Join"),
    'irotat': TOPOFields('irotat', int, 'IROTAT',
                         doc="apparently the last atom that would move if atom"
                             "i was rotated, however the meaning has been lost"
                             "over time. Currently unused in sander or gibbs.",
                         meth="",
                         meth_pl="Irotat"),
    'type': TOPOFields('type', DTYPE+"80", 'RADIUS_SET',
                       doc="the radius set chosen inside LEaP",
                       meth="",
                       meth_pl="type"),
    'rborn': TOPOFields('rborn', float, 'RADII',
                        doc="Generalized Born intrinsic dielectric radii.",
                        meth="RBorn",
                        meth_pl="Rborns"),
    'fs': TOPOFields('fs', float, 'SCREEN',
                     doc="Screening parameters used in Generalized Born.",
                     meth="FS",
                     meth_pl="FSes"),
    'iptres': TOPOFields('iptres', int, 'SOLVENT_POINTERS',
                         doc="final residue that is considered part of the"
                             " solute,reset in sander and gibbs",
                         meth="Iptres",
                         meth_pl="Iptreses"),
    'nspm': TOPOFields('nspm', int, 'SOLVENT_POINTERS',
                       doc="total number of molecules.",
                       meth="",
                       meth_pl="Nspm"),
    'nspsol': TOPOFields('nspsol', int, 'SOLVENT_POINTERS',
                         doc="the first solvent 'molecule'",
                         meth="",
                         meth_pl="Nspsol"),
    'nsp': TOPOFields('nsp', int, 'ATOMS_PER_MOLECULE',
                      doc="the total number of atoms in each molecule,"
                          "necessary to correctly perform the pressure "
                          "scaling.",
                      meth="",
                      meth_pl="Nsp"),
    'oldbeta': TOPOFields('oldbeta', float, 'BOX_DIMENSIONS',
                          doc="periodic box, angle between the XY and YZ "
                              "planes in degrees. This is now redundant, "
                              "as it is present in the inpcrd files. "
                              "It is ignored here.",
                          meth="",
                          meth_pl="Oldbeta"),
    'box1': TOPOFields('box1', float, 'BOX_DIMENSIONS',
                       doc="the periodic box lengths in the X directions"
                           "This is now redundant, as it is present in the"
                           " inpcrd files. It is ignored here.",
                       meth="",
                       meth_pl="Box1"),
    'box2': TOPOFields('box2', float, 'BOX_DIMENSIONS',
                       doc="the periodic box lengths in the Y directions"
                           "This is now redundant, as it is present in the"
                           " inpcrd files. It is ignored here.",
                       meth="",
                       meth_pl="Box2"),
    'box3': TOPOFields('box3', float, 'BOX_DIMENSIONS',
                       doc="the periodic box lengths in the Z directions"
                           "This is now redundant, as it is present in the"
                           " inpcrd files. It is ignored here.",
                       meth="",
                       meth_pl="Box3"),
    'natcap': TOPOFields('natcap', int, 'CAP_INFO',
                         doc="last atom before the start of the cap of waters"
                             "placed by edit",
                         meth="Natcap",
                         meth_pl="Natcaps"),
    'cutcap': TOPOFields('cutcap', float, 'CAP_INFO2',
                         doc="the distance from the center of the cap to the "
                             "outside",
                         meth="",
                         meth_pl="Cutcaps"),
    'xcap': TOPOFields('xcap', float, 'CAP_INFO2',
                       doc="X coordinate for the center of the cap.",
                       meth="Xcap",
                       meth_pl="Xcaps"),
    'ycap': TOPOFields('ycap', float, 'CAP_INFO2',
                       doc="Y coordinate for the center of the cap",
                       meth="Ycap",
                       meth_pl="Ycaps"),
    'zcap': TOPOFields('zcap', float, 'CAP_INFO2',
                       doc="Z coordinate for the center of the cap",
                       meth="Zcap",
                       meth_pl="Zcaps"),

    'ibper': TOPOFields('ibper', int, None,
                        doc="atoms involved in perturbed bonds",
                        meth="Ibper",
                        meth_pl="Ibpers"),
    'jbper': TOPOFields('jbper', int, None,
                        doc="atoms involved in perturbed bonds",
                        meth="Jbper",
                        meth_pl="Jbpers"),
    'icper': TOPOFields('icper', int, None,
                        doc="pointer into the bond parameter arrays RK and REQ"
                            " for the perturbed bonds.  ICBPER(i) represents "
                            "lambda=1 and ICBPER(i+NBPER) represents"
                            " lambda=0.",
                        meth="Icper",
                        meth_pl="Icpers"),
    'ipter': TOPOFields('ipter', int, None,
                        doc="atoms involved in perturbed angles",
                        meth="Ipter",
                        meth_pl="Ipters"),
    'jpter': TOPOFields('jpter', int, None,
                        doc="atoms involved in perturbed angles",
                        meth="Jpter",
                        meth_pl="Jpters"),
    'ktper': TOPOFields('ktper', int, None,
                        doc="atoms involved in perturbed angles",
                        meth="Ktper",
                        meth_pl="Ktpers"),
    'ictper': TOPOFields('ictper', int, None,
                         doc="pointer into the angle parameter arrays TK and "
                             "TEQ for the perturbed angles.  ICTPER(i) "
                             "represents lambda=0 and ICTPER(i+NGPER) "
                             "represents lambda=1.",
                         meth="Ictper",
                         meth_pl="Ictper"),
    'ipper': TOPOFields('ipper', int, None,
                        doc="atoms involved in perturbed dihedrals.",
                        meth="Ipper",
                        meth_pl="Ippers"),
    'jpper': TOPOFields('jpper', int, None,
                        doc="atoms involved in perturbed dihedrals.",
                        meth="Jpper",
                        meth_pl="Jppers"),
    'kpper': TOPOFields('kpper', int, None,
                        doc="atoms involved in perturbed dihedrals.",
                        meth="Kpper",
                        meth_pl="Kppers"),
    'lpper': TOPOFields('lpper', int, None,
                        doc="atoms involved in perturbed dihedrals.",
                        meth="Lpper",
                        meth_pl="Lppers"),
    'icpper': TOPOFields('icpper', int, None,
                         doc="pointer into the dihedral parameter arrays PK, "
                             "PN and PHASE for the perturbed dihedrals.  "
                             "ICPPER(i) represents lambda=1 and ICPPER"
                             "(i+NGPER) represents lambda=0.",
                         meth="Icpper",
                         meth_pl="Icppers"),

    'labres': TOPOFields('labres', DTYPE+"4", None,
                         doc="residue names at lambda=0",
                         meth="Labres",
                         meth_pl="Labreses"),
    'igrper': TOPOFields('igrper', DTYPE+"4", None,
                         doc="atomic names at lambda=0.",
                         meth="Igrper",
                         meth_pl="Igrpers"),
    'ismper': TOPOFields('ismper', DTYPE+"4", None,
                         doc="atomic symbols at lambda=0",
                         meth="Ismper",
                         meth_pl="Ismpers"),
    'almper': TOPOFields('almper', float, None,
                         doc="unused currently in gibbs",
                         meth="Almper",
                         meth_pl="Almpers"),
    'iaper': TOPOFields('iaper', int, None,
                        doc="IAPER(i) = 1 if the atom is being perturbed",
                        meth="Iaper",
                        meth_pl="Iapers"),
    'iacper': TOPOFields('iacper', int, None,
                         doc="index for the atom types involved in Lennard "
                             "Jones interactions at lambda=0.  Similar to IAC"
                             ". See ICO.",
                         meth="Iacper",
                         meth_pl="Iacpers"),
    'cgper': TOPOFields('cgper', float, None,
                        doc="atomic charges at lambda=0",
                        meth="Cgper",
                        meth_pl="Cgpers"),
    'atpol': TOPOFields('atpol', float, "POLARIZABILITY",
                        doc="atomic polarizabilities",
                        meth="Atpol",
                        meth_pl="Atpols"),
    'atpol1': TOPOFields('atpol1', float, None,
                         doc="atomic polarizabilities at lambda = 1 "
                             "(above is at lambda = 0)",
                         meth="Atpol1",
                         meth_pl="Atpol1s")
}

__doc__ += """
.. glossary::
"""

keys = list(AMBER_TOPO_FIELDS.keys())
keys.sort()


for key in keys:

    field = AMBER_TOPO_FIELDS[key]

    __doc__ += '\n\n   ' + key + '\n'

    if field.synonym:
        __doc__ += '   ' + field.synonym + '\n'

    __doc__ += wrapText(field.doc + (' *(read only)*' if field.readonly
                                     else ''), indent=6)

    if field.selstr:
        sel = "\n      ``'" + "'``,\n      ``'".join(field.selstr) + "'``"
        __doc__ += '\n\n      *E.g.:* ' + sel


def wrapGetMethod(fn):
    def getMethod(self):
        return fn(self)
    return getMethod


def wrapSetMethod(fn):
    def setMethod(self, data):
        return fn(self, data)
    return setMethod
